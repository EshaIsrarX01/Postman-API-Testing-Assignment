{
	"info": {
		"_postman_id": "19cf117c-d1a2-43e9-a17d-5c51d5f68227",
		"name": "EshaIsrar_API_Testing",
		"description": "This collection is created by Esha Israr for professional API testing using the Reqres.in fake REST API. It demonstrates all essential HTTP methods (GET, POST, PUT, PATCH, DELETE) and incorporates:\n\n- Use of environment variables for Base URL\n    \n- Random data generation in Pre-request scripts\n    \n- Parsing of JSON responses\n    \n- Chai assertion checks (including deliberate failures)\n    \n- Dynamic variable passing across requests\n    \n- Clean and modular scripting practice\n    \n\nDesigned and tested using Postman Desktop App.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46904606",
		"_collection_link": "https://eshaisrar-7212918.postman.co/workspace/7cf2b586-65e6-4026-8812-984861b0b4ab/collection/46904606-19cf117c-d1a2-43e9-a17d-5c51d5f68227?action=share&source=collection_link&creator=46904606"
	},
	"item": [
		{
			"name": "GET - List Users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({\r",
							"  key: \"x-api-key\",\r",
							"  value: \"reqres-free-v1\"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"console.log(\"User email:\", response.data[0].email);\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"User list is not empty\", () => {\r",
							"    pm.expect(response.data.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// Added comprehensive tests (from previous suggestions)\r",
							"pm.test(\"Response is an object\", () => {\r",
							"    pm.expect(response).to.be.an('object');\r",
							"});\r",
							"pm.test(\"Response has 'data' property\", () => {\r",
							"    pm.expect(response).to.have.property('data');\r",
							"});\r",
							"pm.test(\"'data' property is an array\", () => {\r",
							"    pm.expect(response.data).to.be.an('array');\r",
							"});\r",
							"pm.test(\"Each user object has expected keys\", () => {\r",
							"    response.data.forEach(user => {\r",
							"        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');\r",
							"    });\r",
							"});\r",
							"pm.test(\"User ID is a number\", () => {\r",
							"    pm.expect(typeof response.data[0].id).to.eql('number');\r",
							"});\r",
							"pm.test(\"User email is a string\", () => {\r",
							"    pm.expect(typeof response.data[0].email).to.eql('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "response - List All Users",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 20,\r\n    \"email\": \"eesha.israr08@gmail.com\",\r\n    \"first_name\": \"Esha\",\r\n    \"last_name\": \"Israr\",\r\n    \"job\": \"QA intern\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Jul 2025 09:43:34 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"41e-bY3U72nulxuwNd/TmihMEHjLmek\""
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
						},
						{
							"key": "Ratelimit-Limit",
							"value": "100"
						},
						{
							"key": "Ratelimit-Policy",
							"value": "100;w=60"
						},
						{
							"key": "Ratelimit-Remaining",
							"value": "98"
						},
						{
							"key": "Ratelimit-Reset",
							"value": "60"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=e%2ByYx9bMOitRKxlgciCmqG04gVdZPahEjpDvq%2Fan%2B7s%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1752984155\"}],\"max_age\":3600}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=\"https://nel.heroku.com/reports?s=e%2ByYx9bMOitRKxlgciCmqG04gVdZPahEjpDvq%2Fan%2B7s%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1752984155\""
						},
						{
							"key": "Via",
							"value": "1.1 heroku-router"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Request-Id",
							"value": "e62ce877-950d-e90a-6398-79d856661e04"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "max-age=14400"
						},
						{
							"key": "CF-Cache-Status",
							"value": "HIT"
						},
						{
							"key": "Age",
							"value": "1292"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "962183d9982e34e9-KHI"
						},
						{
							"key": "server-timing",
							"value": "cfL4;desc=\"?proto=TCP&rtt=36421&min_rtt=27013&rtt_var=17371&sent=43&recv=43&lost=0&retrans=0&sent_bytes=6126&recv_bytes=1604&delivery_rate=97052&cwnd=256&unsent_bytes=0&cid=d5889070b39529f6&ts=35214&x=0\""
						}
					],
					"cookie": [],
					"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"email\": \"george.bluth@reqres.in\",\n            \"first_name\": \"George\",\n            \"last_name\": \"Bluth\",\n            \"avatar\": \"https://reqres.in/img/faces/1-image.jpg\"\n        },\n        {\n            \"id\": 2,\n            \"email\": \"janet.weaver@reqres.in\",\n            \"first_name\": \"Janet\",\n            \"last_name\": \"Weaver\",\n            \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n        },\n        {\n            \"id\": 3,\n            \"email\": \"emma.wong@reqres.in\",\n            \"first_name\": \"Emma\",\n            \"last_name\": \"Wong\",\n            \"avatar\": \"https://reqres.in/img/faces/3-image.jpg\"\n        },\n        {\n            \"id\": 4,\n            \"email\": \"eve.holt@reqres.in\",\n            \"first_name\": \"Eve\",\n            \"last_name\": \"Holt\",\n            \"avatar\": \"https://reqres.in/img/faces/4-image.jpg\"\n        },\n        {\n            \"id\": 5,\n            \"email\": \"charles.morris@reqres.in\",\n            \"first_name\": \"Charles\",\n            \"last_name\": \"Morris\",\n            \"avatar\": \"https://reqres.in/img/faces/5-image.jpg\"\n        },\n        {\n            \"id\": 6,\n            \"email\": \"tracey.ramos@reqres.in\",\n            \"first_name\": \"Tracey\",\n            \"last_name\": \"Ramos\",\n            \"avatar\": \"https://reqres.in/img/faces/6-image.jpg\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://contentcaddy.io?utm_source=reqres&utm_medium=json&utm_campaign=referral\",\n        \"text\": \"Tired of writing endless social media content? Let Content Caddy generate it for you.\"\n    }\n}"
				}
			]
		},
		{
			"name": "List Users By Query Params",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/api/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Creating a new user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({\r",
							"  key: \"x-api-key\",\r",
							"  value: \"reqres-free-v1\"\r",
							"});\r",
							"\r",
							"pm.variables.set(\"randomName\", \"User\" + Math.floor(Math.random()*1000));\r",
							"pm.variables.set(\"randomJob\", \"QA_\" + Math.random().toString(36).substring(7));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"console.log(\"Created User ID:\", jsonData.id);\r",
							"console.log(\"Created At:\", jsonData.createdAt);\r",
							"\r",
							"// Check status\r",
							"pm.test(\"Status is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Check if ID and timestamp are returned\r",
							"pm.test(\"Response contains user ID\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains createdAt timestamp\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
							"});\r",
							"\r",
							"// Deliberate fail: Job should be 'WrongJob' (expected to fail)\r",
							"pm.test(\"Deliberate Fail Test - Job Mismatch\", () => {\r",
							"    pm.expect(jsonData.job).to.eql(\"WrongJob\"); \r",
							"});\r",
							"\r",
							"// Reset variables after this request\r",
							"pm.variables.unset(\"randomName\");\r",
							"pm.variables.unset(\"randomJob\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Esha Israr\",\r\n  \"job\": \"QA intern\"\r\n}\r\n\r\n{\r\n  \"name\": \"{{randomName}}\",\r\n  \"job\": \"{{randomJob}}\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({\r",
							"  key: \"x-api-key\",\r",
							"  value: \"reqres-free-v1\"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {\r",
							"    const data = pm.response.json();\r",
							"\r",
							"    // Status Code Assertion\r",
							"    pm.test(\"Status is 200 OK\", () => {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    // Response Body Structure Assertions\r",
							"    pm.test(\"Response is an object\", () => {\r",
							"        pm.expect(data).to.be.an('object');\r",
							"    });\r",
							"    pm.test(\"Response has 'name' property\", () => {\r",
							"        pm.expect(data).to.have.property('name');\r",
							"    });\r",
							"    pm.test(\"Response has 'job' property\", () => {\r",
							"        pm.expect(data).to.have.property('job');\r",
							"    });\r",
							"    pm.test(\"Response has 'updatedAt' property\", () => {\r",
							"        pm.expect(data).to.have.property('updatedAt');\r",
							"    });\r",
							"\r",
							"    // Value Verification Assertions\r",
							"    pm.test(\"Name updated to 'Esha Israr'\", () => {\r",
							"        pm.expect(data.name).to.eql(\"Esha Israr\");\r",
							"    });\r",
							"    pm.test(\"Job updated to 'SQA Engineer'\", () => {\r",
							"        pm.expect(data.job).to.eql(\"SQA Engineer\");\r",
							"    });\r",
							"\r",
							"    // Data Type Assertions\r",
							"    pm.test(\"updatedAt is a string\", () => {\r",
							"        pm.expect(typeof data.updatedAt).to.eql('string');\r",
							"    });\r",
							"\r",
							"    console.log(\"Updated at:\", data.updatedAt);\r",
							"\r",
							"} catch (err) {\r",
							"    console.error(\"Response not JSON or test error:\", err.message);\r",
							"    pm.test(\"Response must be JSON\", () => {\r",
							"        throw new Error(\"Expected JSON but got invalid data. Error: \" + err.message);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Esha Israr\",\r\n  \"job\": \"SQA Engineer\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": [
				{
					"name": "Updated the user response",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Esha Israr\",\r\n  \"job\": \"SQA Engineer\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Jul 2025 10:04:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"51-K4E8K6U0XBd0wv8YyNoyOcYtox0\""
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
						},
						{
							"key": "Ratelimit-Limit",
							"value": "100"
						},
						{
							"key": "Ratelimit-Policy",
							"value": "100;w=60"
						},
						{
							"key": "Ratelimit-Remaining",
							"value": "98"
						},
						{
							"key": "Ratelimit-Reset",
							"value": "60"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=3jZsaOLUDoa2tuicvXsO%2Fx3bc97TgmkFchSSLPSaX%2Bc%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1753005871\"}],\"max_age\":3600}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=\"https://nel.heroku.com/reports?s=3jZsaOLUDoa2tuicvXsO%2Fx3bc97TgmkFchSSLPSaX%2Bc%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1753005871\""
						},
						{
							"key": "Via",
							"value": "1.1 heroku-router"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Request-Id",
							"value": "2bc5e7cb-e27d-3958-31ee-c0b5783ba6b4"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "9621a284cd8e2097-KHI"
						},
						{
							"key": "server-timing",
							"value": "cfL4;desc=\"?proto=TCP&rtt=43600&min_rtt=26105&rtt_var=22398&sent=195&recv=192&lost=0&retrans=0&sent_bytes=16493&recv_bytes=2474&delivery_rate=101216&cwnd=257&unsent_bytes=0&cid=5e5fd61d1f3c181c&ts=184752&x=0\""
						}
					],
					"cookie": [],
					"body": "{\n    \"name\": \"Esha Israr\",\n    \"job\": \"SQA Engineer\",\n    \"updatedAt\": \"2025-07-20T10:04:31.388Z\"\n}"
				}
			]
		},
		{
			"name": "Partial Update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({\r",
							"  key: \"x-api-key\",\r",
							"  value: \"reqres-free-v1\"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let data = pm.response.json();\r",
							"\r",
							"// Status Code Assertion\r",
							"pm.test(\"Status is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Response Body Structure Assertions\r",
							"pm.test(\"Response is an object\", () => {\r",
							"    pm.expect(data).to.be.an('object');\r",
							"});\r",
							"pm.test(\"Response has 'job' property\", () => {\r",
							"    pm.expect(data).to.have.property('job');\r",
							"});\r",
							"pm.test(\"Response has 'updatedAt' property\", () => {\r",
							"    pm.expect(data).to.have.property('updatedAt');\r",
							"});\r",
							"\r",
							"// Value Verification Assertion\r",
							"pm.test(\"Job updated using PATCH to 'Lead QA'\", () => {\r",
							"    pm.expect(data.job).to.eql(\"Lead QA\");\r",
							"});\r",
							"\r",
							"// Data Type Assertion\r",
							"pm.test(\"updatedAt is a string\", () => {\r",
							"    pm.expect(typeof data.updatedAt).to.eql('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": \"Lead QA\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": [
				{
					"name": "Info updated successfully",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"job\": \"Lead QA\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Jul 2025 10:07:15 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"38-YGquQyd7AyaMrlfk9n1eRz9xGSA\""
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
						},
						{
							"key": "Ratelimit-Limit",
							"value": "100"
						},
						{
							"key": "Ratelimit-Policy",
							"value": "100;w=60"
						},
						{
							"key": "Ratelimit-Remaining",
							"value": "98"
						},
						{
							"key": "Ratelimit-Reset",
							"value": "60"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=4%2BPFrzvsmIr4qXvRJ5boDSEDuprZ6VktNCEeJ4Bn4Ts%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1753006034\"}],\"max_age\":3600}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=\"https://nel.heroku.com/reports?s=4%2BPFrzvsmIr4qXvRJ5boDSEDuprZ6VktNCEeJ4Bn4Ts%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1753006034\""
						},
						{
							"key": "Via",
							"value": "1.1 heroku-router"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Request-Id",
							"value": "f6400fb0-14d1-1a88-fc9c-918949f63e85"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "9621a682880fb7f7-KHI"
						},
						{
							"key": "server-timing",
							"value": "cfL4;desc=\"?proto=TCP&rtt=25628&min_rtt=25006&rtt_var=10621&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2802&recv_bytes=646&delivery_rate=96851&cwnd=251&unsent_bytes=0&cid=e8427354dec8536d&ts=812&x=0\""
						}
					],
					"cookie": [],
					"body": "{\n    \"job\": \"Lead QA\",\n    \"updatedAt\": \"2025-07-20T10:07:14.917Z\"\n}"
				},
				{
					"name": "Partial Update",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"job\": \"Lead QA\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Jul 2025 10:35:58 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"38-h2O8KMLVy11oM3or4DPD6O/LJbM\""
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
						},
						{
							"key": "Ratelimit-Limit",
							"value": "100"
						},
						{
							"key": "Ratelimit-Policy",
							"value": "100;w=60"
						},
						{
							"key": "Ratelimit-Remaining",
							"value": "98"
						},
						{
							"key": "Ratelimit-Reset",
							"value": "60"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=jIMjRgFt8WgzbSS4oaGXX%2By%2BtmZfDMHXDdpUwFzQLs0%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1753007758\"}],\"max_age\":3600}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=\"https://nel.heroku.com/reports?s=jIMjRgFt8WgzbSS4oaGXX%2By%2BtmZfDMHXDdpUwFzQLs0%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1753007758\""
						},
						{
							"key": "Via",
							"value": "1.1 heroku-router"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Request-Id",
							"value": "6b15be4f-0727-88bc-c6cc-07decc103f0d"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "cf-cache-status",
							"value": "DYNAMIC"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "9621d09aad28e8c7-KHI"
						},
						{
							"key": "server-timing",
							"value": "cfL4;desc=\"?proto=TCP&rtt=26640&min_rtt=25274&rtt_var=9599&sent=4&recv=6&lost=0&retrans=0&sent_bytes=2801&recv_bytes=648&delivery_rate=88444&cwnd=251&unsent_bytes=0&cid=62eef4039dd98b92&ts=304&x=0\""
						}
					],
					"cookie": [],
					"body": "{\n    \"job\": \"Lead QA\",\n    \"updatedAt\": \"2025-07-20T10:35:58.596Z\"\n}"
				}
			]
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({\r",
							"  key: \"x-api-key\",\r",
							"  value: \"reqres-free-v1\"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 204 No Content\", () => {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": \"Lead QA\"\r\n}\r\n"
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": [
				{
					"name": "delete user",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"job\": \"Lead QA\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{base_url}}/api/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Jul 2025 10:09:38 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "CF-RAY",
							"value": "9621aa00dc51e89f-KHI"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
						},
						{
							"key": "Ratelimit-Limit",
							"value": "100"
						},
						{
							"key": "Ratelimit-Policy",
							"value": "100;w=60"
						},
						{
							"key": "Ratelimit-Remaining",
							"value": "98"
						},
						{
							"key": "Ratelimit-Reset",
							"value": "60"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=kQy9ulWYCa7suqfDKMd7rXrG%2BzgCx0f9CNDEz%2BDL%2BrE%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1753006177\"}],\"max_age\":3600}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=\"https://nel.heroku.com/reports?s=kQy9ulWYCa7suqfDKMd7rXrG%2BzgCx0f9CNDEz%2BDL%2BrE%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1753006177\""
						},
						{
							"key": "Via",
							"value": "1.1 heroku-router"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Request-Id",
							"value": "1f175344-7db8-884b-5d9a-81795e09c996"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "cf-cache-status",
							"value": "DYNAMIC"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "server-timing",
							"value": "cfL4;desc=\"?proto=TCP&rtt=25967&min_rtt=25275&rtt_var=10862&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2801&recv_bytes=643&delivery_rate=94248&cwnd=251&unsent_bytes=0&cid=9a70c4c4b5642597&ts=757&x=0\""
						}
					],
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Register User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({\r",
							"  key: \"x-api-key\",\r",
							"  value: \"reqres-free-v1\"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"console.log(\"Full response:\", jsonData);\r",
							"\r",
							"// Status Code Assertion\r",
							"pm.test(\"Status is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Response Body Structure Assertions\r",
							"pm.test(\"Response is an object\", () => {\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"});\r",
							"pm.test(\"Response contains 'id' property\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"pm.test(\"Response contains 'token' property\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"});\r",
							"\r",
							"// Data Type Assertions\r",
							"pm.test(\"ID is a number\", () => {\r",
							"    pm.expect(typeof jsonData.id).to.eql('number');\r",
							"});\r",
							"pm.test(\"Token is a string\", () => {\r",
							"    pm.expect(typeof jsonData.token).to.eql('string');\r",
							"});\r",
							"\r",
							"// Value Verification / Token Specific Assertions\r",
							"pm.test(\"Token is not empty\", () => {\r",
							"    pm.expect(jsonData.token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Save the token for subsequent requests\r",
							"pm.variables.set(\"userToken\", jsonData.token);\r",
							"pm.test(\"Token is saved as a variable\", () => {\r",
							"    pm.expect(pm.variables.get(\"userToken\")).to.eql(jsonData.token);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"eve.holt@reqres.in\",\r\n  \"password\": \"pistol\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": [
				{
					"name": "user register",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"eve.holt@reqres.in\",\r\n  \"password\": \"pistol\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Jul 2025 10:46:34 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "36"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "CF-RAY",
							"value": "9621e01ebcd1e8c7-KHI"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"24-4iP0za1geN2he+ohu8F0FhCjLks\""
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
						},
						{
							"key": "Ratelimit-Limit",
							"value": "100"
						},
						{
							"key": "Ratelimit-Policy",
							"value": "100;w=60"
						},
						{
							"key": "Ratelimit-Remaining",
							"value": "98"
						},
						{
							"key": "Ratelimit-Reset",
							"value": "60"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=YIwtoxMk5J6IdHah1zl831aZH%2BEXuor7xsJ0dulKYL8%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1753008394\"}],\"max_age\":3600}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=\"https://nel.heroku.com/reports?s=YIwtoxMk5J6IdHah1zl831aZH%2BEXuor7xsJ0dulKYL8%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1753008394\""
						},
						{
							"key": "Via",
							"value": "1.1 heroku-router"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Request-Id",
							"value": "3072c02b-79e6-e4a6-b942-9bb91223606d"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "cf-cache-status",
							"value": "DYNAMIC"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "server-timing",
							"value": "cfL4;desc=\"?proto=TCP&rtt=25816&min_rtt=25221&rtt_var=10648&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2803&recv_bytes=686&delivery_rate=96858&cwnd=251&unsent_bytes=0&cid=fa0a04e989226c5c&ts=415&x=0\""
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 4,\n    \"token\": \"QpwL5tke4Pnpja7X4\"\n}"
				}
			]
		},
		{
			"name": "Delayed Response with Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({\r",
							"  key: \"x-api-key\",\r",
							"  value: \"reqres-free-v1\"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json(); // Ensure 'response' variable is correctly initialized\r",
							"\r",
							"// Status Code Assertion\r",
							"pm.test(\"Response delay test successful (Status 200 OK)\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Response Body Structure Assertions\r",
							"pm.test(\"Response is an object\", () => {\r",
							"    pm.expect(response).to.be.an('object');\r",
							"});\r",
							"pm.test(\"Response has 'data' property\", () => {\r",
							"    pm.expect(response).to.have.property('data');\r",
							"});\r",
							"pm.test(\"'data' property is an array\", () => {\r",
							"    pm.expect(response.data).to.be.an('array');\r",
							"});\r",
							"pm.test(\"User list is not empty\", () => {\r",
							"    pm.expect(response.data.length).to.be.above(0);\r",
							"});\r",
							"pm.test(\"Each user object has expected keys\", () => {\r",
							"    response.data.forEach(user => {\r",
							"        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Data Type Assertions for first user\r",
							"pm.test(\"First user's ID is a number\", () => {\r",
							"    pm.expect(typeof response.data[0].id).to.eql('number');\r",
							"});\r",
							"pm.test(\"First user's email is a string\", () => {\r",
							"    pm.expect(typeof response.data[0].email).to.eql('string');\r",
							"});\r",
							"pm.test(\"First user's first_name is a string\", () => {\r",
							"    pm.expect(typeof response.data[0].first_name).to.eql('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{userToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users?delay=5",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "5"
						}
					]
				}
			},
			"response": [
				{
					"name": "delayed response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users?delay=3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "delay",
									"value": "3"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Jul 2025 10:48:26 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"41e-bY3U72nulxuwNd/TmihMEHjLmek\""
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
						},
						{
							"key": "Ratelimit-Limit",
							"value": "100"
						},
						{
							"key": "Ratelimit-Policy",
							"value": "100;w=60"
						},
						{
							"key": "Ratelimit-Remaining",
							"value": "97"
						},
						{
							"key": "Ratelimit-Reset",
							"value": "36"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=zDFY6EjS85tvX%2B%2FQZ%2BAwwJDwFkKp7dHraARIgrb4SuY%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1753008502\"}],\"max_age\":3600}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=\"https://nel.heroku.com/reports?s=zDFY6EjS85tvX%2B%2FQZ%2BAwwJDwFkKp7dHraARIgrb4SuY%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1753008502\""
						},
						{
							"key": "Via",
							"value": "1.1 heroku-router"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Request-Id",
							"value": "767b4f9a-09a8-e40c-39c6-41089ad6ad6d"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "cf-cache-status",
							"value": "DYNAMIC"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "9621e2c619a14906-KHI"
						},
						{
							"key": "server-timing",
							"value": "cfL4;desc=\"?proto=TCP&rtt=33383&min_rtt=25937&rtt_var=19359&sent=28&recv=28&lost=0&retrans=0&sent_bytes=4685&recv_bytes=809&delivery_rate=98587&cwnd=254&unsent_bytes=0&cid=bf8dd7555290ffa7&ts=24439&x=0\""
						}
					],
					"cookie": [],
					"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"email\": \"george.bluth@reqres.in\",\n            \"first_name\": \"George\",\n            \"last_name\": \"Bluth\",\n            \"avatar\": \"https://reqres.in/img/faces/1-image.jpg\"\n        },\n        {\n            \"id\": 2,\n            \"email\": \"janet.weaver@reqres.in\",\n            \"first_name\": \"Janet\",\n            \"last_name\": \"Weaver\",\n            \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n        },\n        {\n            \"id\": 3,\n            \"email\": \"emma.wong@reqres.in\",\n            \"first_name\": \"Emma\",\n            \"last_name\": \"Wong\",\n            \"avatar\": \"https://reqres.in/img/faces/3-image.jpg\"\n        },\n        {\n            \"id\": 4,\n            \"email\": \"eve.holt@reqres.in\",\n            \"first_name\": \"Eve\",\n            \"last_name\": \"Holt\",\n            \"avatar\": \"https://reqres.in/img/faces/4-image.jpg\"\n        },\n        {\n            \"id\": 5,\n            \"email\": \"charles.morris@reqres.in\",\n            \"first_name\": \"Charles\",\n            \"last_name\": \"Morris\",\n            \"avatar\": \"https://reqres.in/img/faces/5-image.jpg\"\n        },\n        {\n            \"id\": 6,\n            \"email\": \"tracey.ramos@reqres.in\",\n            \"first_name\": \"Tracey\",\n            \"last_name\": \"Ramos\",\n            \"avatar\": \"https://reqres.in/img/faces/6-image.jpg\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://contentcaddy.io?utm_source=reqres&utm_medium=json&utm_campaign=referral\",\n        \"text\": \"Tired of writing endless social media content? Let Content Caddy generate it for you.\"\n    }\n}"
				},
				{
					"name": "delay response 5 secs",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users?delay=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "delay",
									"value": "5"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Jul 2025 10:49:45 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"41e-bY3U72nulxuwNd/TmihMEHjLmek\""
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
						},
						{
							"key": "Ratelimit-Limit",
							"value": "100"
						},
						{
							"key": "Ratelimit-Policy",
							"value": "100;w=60"
						},
						{
							"key": "Ratelimit-Remaining",
							"value": "94"
						},
						{
							"key": "Ratelimit-Reset",
							"value": "34"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=col2CTfJkpvBwBdEmBP3u%2BeKQxN1cz7kSbJbJE0bYk0%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1753008580\"}],\"max_age\":3600}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=\"https://nel.heroku.com/reports?s=col2CTfJkpvBwBdEmBP3u%2BeKQxN1cz7kSbJbJE0bYk0%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1753008580\""
						},
						{
							"key": "Via",
							"value": "1.1 heroku-router"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-Request-Id",
							"value": "ad94e984-b2cf-ce3f-f3b4-bfbfb83205d2"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "cf-cache-status",
							"value": "DYNAMIC"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "9621e4a889174906-KHI"
						},
						{
							"key": "server-timing",
							"value": "cfL4;desc=\"?proto=TCP&rtt=40630&min_rtt=25544&rtt_var=22041&sent=114&recv=113&lost=0&retrans=0&sent_bytes=10289&recv_bytes=1595&delivery_rate=102437&cwnd=257&unsent_bytes=0&cid=bf8dd7555290ffa7&ts=103629&x=0\""
						}
					],
					"cookie": [],
					"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"email\": \"george.bluth@reqres.in\",\n            \"first_name\": \"George\",\n            \"last_name\": \"Bluth\",\n            \"avatar\": \"https://reqres.in/img/faces/1-image.jpg\"\n        },\n        {\n            \"id\": 2,\n            \"email\": \"janet.weaver@reqres.in\",\n            \"first_name\": \"Janet\",\n            \"last_name\": \"Weaver\",\n            \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n        },\n        {\n            \"id\": 3,\n            \"email\": \"emma.wong@reqres.in\",\n            \"first_name\": \"Emma\",\n            \"last_name\": \"Wong\",\n            \"avatar\": \"https://reqres.in/img/faces/3-image.jpg\"\n        },\n        {\n            \"id\": 4,\n            \"email\": \"eve.holt@reqres.in\",\n            \"first_name\": \"Eve\",\n            \"last_name\": \"Holt\",\n            \"avatar\": \"https://reqres.in/img/faces/4-image.jpg\"\n        },\n        {\n            \"id\": 5,\n            \"email\": \"charles.morris@reqres.in\",\n            \"first_name\": \"Charles\",\n            \"last_name\": \"Morris\",\n            \"avatar\": \"https://reqres.in/img/faces/5-image.jpg\"\n        },\n        {\n            \"id\": 6,\n            \"email\": \"tracey.ramos@reqres.in\",\n            \"first_name\": \"Tracey\",\n            \"last_name\": \"Ramos\",\n            \"avatar\": \"https://reqres.in/img/faces/6-image.jpg\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://contentcaddy.io?utm_source=reqres&utm_medium=json&utm_campaign=referral\",\n        \"text\": \"Tired of writing endless social media content? Let Content Caddy generate it for you.\"\n    }\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reqres.in",
			"type": "string"
		},
		{
			"key": "userToken",
			"value": "",
			"type": "default"
		}
	]
}